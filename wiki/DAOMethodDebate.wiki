#summary We're considering different options for what methods to include in the DAO.

= Introduction =

Below are several options for what methods to include in the DAOs. The order in which they are listed here is not meant to be significant.

*_Dear World: Please comment if you have any wisdom on this (or even just an opinion)._*


== (1) Current (as of 0.3.3) ==


{{{void create(Object object)}}}
Add the specified object as a new entry in the database.


{{{boolean createOrUpdate(Object object)}}}
If the id of the object is null or zero, create, otherwise update.
return <code>true</code> if create; <code>false</code> if update.

	/**
	 * Delete the object with the specified id and class from the database.
	 * 
	 * @return <code>true</code> if the object is found in the database and
	 *         deleted, <code>false</code> if the item is not found.
	 */
	{{{boolean deleteById(Serializable id, Class<?> klass)}}}

	/**
	 * Delete the specified object from the database.
	 * 
	 * @return <code>true</code> if the object is found in the database and
	 *         deleted, <code>false</code> if the item is not found.
	 */
	{{{boolean deleteEntity(Object object)}}}

	/**
	 * Get the object with the specified id and class from the database.
	 */
	p{{{<T> T fetch(Serializable id, Class<T> klass)}}}

	/**
	 * Get a list of all the objects of the specified type.
	 */
	{{{<T> List<T> fetchAll(Class<T> klass)}}}

	/**
	 * Update the corresponding object in the database with the properties of
	 * the specified object. The corresponding object is determined by id.
	 */
	{{{void update(Object object)}}}

	/**
	 * Search for objects given the search parameters in the specified
	 * <code>Search</code> object.
	 */
	{{{List search(Search search)}}}

	/**
	 * Returns the total number of results that would be returned using the
	 * given <code>Search</code> if there were no paging or maxResult limits.
	 */
	{{{int searchLength(Search search)}}}

	/**
	 * Returns a <code>SearchResult</code> object that includes the list of
	 * results like <code>search()</code> and the total length like
	 * <code>searchLength</code>.
	 */
	{{{SearchResult searchAndLength(Search search)}}}

	/**
	 * Search for a single result using the given parameters.
	 */
	{{{Object searchUnique(Search search) throws NonUniqueResultException}}}

	/**
	 * Returns true if the object is connected to the current Hibernate session.
	 */
	{{{boolean isConnected(Object object)}}}

	/**
	 * Flushes changes in the Hibernate cache to the database.
	 */
	{{{void flush()}}}

	/**
	 * Refresh the content of the given entity from the current database state.
	 */
	{{{void refresh(Object object)}}}

== (2) Based on Hibernate Tools ==

== (3) Based on JPA EntityManager ==