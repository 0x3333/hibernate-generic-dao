#summary We're considering different options for what methods to include in the DAO.

= Introduction =

We are considering revising what methods we include in the DAOs. Below are several ideas of methods to use. The order in which they are listed here is not meant to be significant.

*_Dear World: Please comment if you have any wisdom on this (or even just an opinion)._*


== (1) Current (as of 0.3.3) ==

{{{
void create(Object object)
}}}
Add the specified object as a new entry in the database.


{{{
void update(Object object)
}}}
Update the corresponding object in the database with the properties of
the specified object. The corresponding object is determined by id.

{{{
boolean createOrUpdate(Object object)
}}}
If the id of the object is null or zero, create, otherwise update.
Return true if create; false if update.

{{{
boolean deleteById(Serializable id, Class<?> klass)
}}}
Delete the object with the specified id and class from the database.
Return true if the object is found in the database and deleted, false if the item is not found.

{{{
boolean deleteEntity(Object object)
}}}
elete the specified object from the database.
Return true if the object is found in the database and deleted, false if the item is not found.

{{{
<T> T fetch(Serializable id, Class<T> klass)
}}}
Get the object with the specified id and class from the database.

{{{
<T> List<T> fetchAll(Class<T> klass)
}}}
Get a list of all the objects of the specified type.

{{{
List search(Search search)
}}}
Search for objects given the search parameters in the specified
Search object.

{{{
int searchLength(Search search)
}}}
Returns the total number of results that would be returned using the
given Search if there were no paging or maxResult limits.

{{{
SearchResult searchAndLength(Search search)
}}}
Returns a SearchResult object that includes the list of
results like search() and the total length like
searchLength.

{{{
Object searchUnique(Search search) throws NonUniqueResultException
}}}
Search for a single result using the given parameters.

{{{
boolean isConnected(Object object)
}}}
Returns true if the object is connected to the current Hibernate session.

{{{
void flush()
}}}
Flushes changes in the Hibernate cache to the database.

{{{
void refresh(Object object)
}}}
Refresh the content of the given entity from the current database state.

== (2) Based on Hibernate Tools ==
{{{
void save(Object instance)
}}}
Uses {{{org.hibernate.Session.saveOrUpdate()}}}

{{{
void delete(Object instance)
}}}
Remove a persistent instance from the datastore. Uses {{{org.hibernate.Session.delete()}}}.

{{{
Object findById(Long id)
}}}
Return the persistent instance of the given entity class with the given identifier, or null if there is no such persistent instance. Uses {{{org.hibernate.Session.get()}}}

{{{
Object merge(Object instance)
}}}
Uses {{{org.hibernate.Session.merge()}}}

{{{
void attachClean(Object instance)
}}}
Uses {{{org.hibernate.Session.lock()}}}, {{{LockMode.NONE}}}

{{{
void attachDirty(Object instance)
}}}
Same as save().


== (3) Based on JPA EntityManager ==

{{{
boolean contains(Object entity) 
}}}
Check if the instance belongs to the current persistence context.

{{{
<T> T find(Class<T> entityClass, Object primaryKey) 
}}}
Find by primary key.

{{{
void flush() 
}}}
Synchronize the persistence context to the underlying database.

{{{
void lock(Object entity, LockModeType lockMode) 
}}}
Set the lock mode for an entity object contained in the persistence context.

{{{
<T> T merge(T entity) 
}}}
Merge the state of the given entity into the current persistence context.

{{{
void persist(Object entity) 
}}}
Make an entity instance managed and persistent.

{{{
void refresh(Object entity)
}}}
Refresh the state of the instance from the database, overwriting changes made to the entity, if any.

{{{
void remove(Object entity)
}}}
Remove the entity instance.

== (4) Based on Hibernate Session API ==