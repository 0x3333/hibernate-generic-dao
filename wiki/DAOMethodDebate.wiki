#summary We're considering different options for what methods to include in the DAO.

= Introduction =

We are considering revising what methods we include in the DAOs. Below are several ideas of methods to use. See [DAOMethodDebateReferences] for approaches used by other frameworks.

*_Dear World: Please comment if you have any wisdom on this (or even just an opinion)._*

= Options =
== (1) Option 1 ==
=== GeneralDAO interface ===
The basic idea is to stay close to the JPA EntityManager mothods since that is a wide standard and we intend to make an implementation for JPA (in addition to the original Hibernate implementation). On top of that, some methods were added for searching and others for convenience.

Also, many methods have variable length argument lists for convenience. This could be a small inconvenience for developers wishing to override these methods.

Using both merge and persist means developers will need to override both (if they need to override the functionality). We may be able to simplify this by having both call some sort of common method(s) that are called before and after save.
{{{
void persist(Object...)
Object merge(Object...)
T find(Class<T>, Serializable)
boolean remove(Object...)
boolean removeById(Serializable, Object...)
List<T> findAll(Class<T>)
List search(Search)
SearchResult searchAndCount(Search)
long count(Class<?>)
long count(Search)
Object searchUnique(Search)
boolean isAttached(Object)
void flush()
void refresh(Object...)
}}}

=== RemoteDAO interface ===
The approach here is different than with GeneralDAO because we're not dealing with objects in the same way; however, we want to keep the naming fairly consistent.

NOTE: We must refrain from using just "get" or "delete" as method names, because these are keywords in ActionScript (Flex/Flash)
{{{
Object find(String, Serializable)
List findAll(String)
Object save(Object) //create or update based on whether id already exist in datastore
void removeById(String, Serializable)
void removeEntity(Object)
void removeByIds(Object[])
void removeEntities(String, Long[])
List search(RemoteSearch)
long count(RemoteSearch)
SearchResult searchAndCount(RemoteSearch)
Object searchUnique(RemoteSearch)
}}}

= Notes =
One of the considerations is that if we provide two or more methods that do something similar (ex. merge and update), both methods will need to be overridden when the user wants to alter the functionality. This could lead to code duplication and possible inconsistencies.