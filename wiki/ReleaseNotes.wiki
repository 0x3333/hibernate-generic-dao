#summary List of changes made for each release and planned changes for upcoming releases.
#labels Featured

==0.3.3 (11/25/2008)==
  * Cleaned up pom.xml (Issue #14):
    * Removed unneeded dependencies and repositories
    * Moved most dependencies to {{{test}}} scope
  * Upgraded to Hibernate 3.3.1GA
  * {{{deleteById()}}} no longer throws an error if no matching object is found in the database. (Issue #15))
  * {{{deleteById()}}} and {{{deleteEntity()}}} now return boolean: true if found and deleted, false if not found.

==0.3.4 (12/16/2008)==
  * Use Hibernate MetaData for Util.getExpectedClass()
  * Refactor RemoteDAO into a separate Remote adapter and DAO dispatcher
  * Make RemoteDAO, GeneralDAO and GenericDAO implementations thinner and more replacable. This way developers can customize their own DAO and Remote methods for the particular project and technology.
  * Separate RemoteDAO into separate remote adapter and DAO dispatcher
  * Use RemoteDAO adapters for specific technologies

==0.4.0 (12/31/2008)==
  * Addressed problems with Components (@Embedded) as per Issue 19.
  * Tested Search w/ polymorphism.
  * Improved Util.callMethod to be more robust.
  * Created new default DAO with different methods. (see blog)
  * Created new default Flex remote DAO with different methods.
  * Added ILIKE operator (Issue 21).
  * Changed saveOrUpdate() to work with assigned as well as generated ids.
  * Added tests for many-to-many relationships and compound ids.
  * Refactored Search objects to be more bean-like

  * Known Issues
    * Javadocs for Search beans are out of date.

==0.4.1 (01/20/2009 current release)==
  * Add option to ignore case on sorts (Issue 24).
  * Ignore Filters with null values (Issue 22).
  * Implement Issue 20 (fields & fetches).
  * Refactor Search bean to use interfaces.
  * Provide a SearchUtil class to aid in working with search interfaces and creating implementations of search interfaces.
  * Add methods to SearchUtil for merging parts of Searches

==0.4.2==
  * Add collection operators (see blog)
  * Allow use of special .id, .class, .size properties

==Future==
  * Consider Issue 23 (query helper methods)
  * Consider how we deal with hibernate special properties .id and .class in Searches.
  * Possibly add ability to compare two properties in a filter.
  * Add implementation for JPA
  * Consider compatibility with multiple entity names per Java class
  * Look at security roles with remote DAOs